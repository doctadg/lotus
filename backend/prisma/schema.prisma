// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  password      String?       // Made optional for migration
  name          String?
  role          String        @default("user") // 'user' or 'admin'
  clerkId       String?       @unique // Clerk user ID for authentication
  stripeCustomerId String?      @unique
  chats         Chat[]
  memories      UserMemory[]
  contexts      UserContext[]
  embeddings    UserEmbedding[]
  subscription  Subscription?
  messageUsage  MessageUsage[]
  adminActions  AdminAction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("users")
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  title     String?
  messages  Message[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  role      String   // 'user' | 'assistant' | 'system'
  content   String
  metadata  Json?
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("messages")
}

model UserMemory {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'preference', 'fact', 'context', 'skill'
  category    String?  // 'personal', 'professional', 'interests', etc.
  key         String   // e.g., 'favorite_color', 'job_title'
  value       String   // the actual memory content
  confidence  Float    @default(1.0) // confidence score 0-1
  source      String   // 'conversation', 'explicit', 'inferred'
  messageId   String?  // reference to the message where this was learned
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, key])
  @@map("user_memories")
}

model UserContext {
  id            String   @id @default(cuid())
  userId        String
  conversationPattern String // JSON string of conversation patterns
  communicationStyle  String? // 'formal', 'casual', 'technical', etc.
  topicsOfInterest    String[] // array of topics the user is interested in
  expertiseAreas      String[] // areas where user has shown expertise
  preferredResponseStyle String? // 'detailed', 'concise', 'examples', etc.
  timezone            String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("user_contexts")
}

model UserEmbedding {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  content          String   // the original text that was embedded
  embedding        Float[]  // vector embedding (fallback for Prisma compatibility)
  vectorEmbedding  Unsupported("vector")? @map("vector_embedding") // pgvector column
  type             String   // 'memory', 'message', 'preference'
  metadata         Json?    // additional context
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now()) @map("created_at")

  @@map("user_embeddings")
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  stripeCustomerId  String?
  stripeSubscriptionId String?
  planType          String   @default("free") // 'free' or 'pro'
  status            String?  // 'active', 'canceled', 'past_due', etc.
  currentPeriodStart DateTime?
  currentPeriodEnd  DateTime?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("subscriptions")
}

model MessageUsage {
  id        String   @id @default(cuid())
  userId    String
  hour      DateTime // timestamp rounded to the hour
  count     Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, hour])
  @@map("message_usage")
}

model AdminAction {
  id          String   @id @default(cuid())
  adminId     String
  action      String   // 'upgrade_user', 'change_role', 'view_stats', etc.
  targetId    String?  // ID of the target user/resource
  details     Json?    // Additional action details
  admin       User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@map("admin_actions")
}
